import requests, os, json, psycopg2, sys, re
from bottle import route, run, debug
from bottle import redirect, request, template, static_file, get, delete
from geopy.geocoders import GoogleV3
from geopy.exc import GeocoderInsufficientPrivileges
from geopy.exc import GeocoderTimedOut

#r = requests.get('https://geoipfree.com/json/').json()
#lat = r['latitude']
#lng = r['longitude']

con = psycopg2.connect("host='localhost' dbname='Events' user='user' password='password'")
cur = con.cursor()

@route("/static/css/<filepath:re:.*\.css>")
def css(filepath):
    return static_file(filepath, root="static/css")

@route("/static/js/<filepath:re:.*\.js>")
def send_static(filepath):
    return static_file(filepath, root="./static/js")

@route('/home', method='GET')
def new_item():
    if request.GET.get('add','').strip():
        Addres = request.GET.get('address', '').strip()
        #Zipcode = request.GET.get('zipcode', '').strip()
        #City = request.GET.get('city', '').strip()
        #State = request.GET.get('state', '').strip()
        geolocator = GoogleV3()
        location = geolocator.geocode(Addres, timeout=10)
        lat = location.latitude
        long = location.longitude
        
        cur.execute('DROP TABLE IF EXISTS myLocation')
        cur.execute("CREATE TABLE if not exists myLocation (id SERIAL PRIMARY KEY, Address VARCHAR)")
        cur.execute("INSERT INTO myLocation (Address) VALUES (%s)", (Addres,))
        cur.execute("ALTER TABLE myLocation ADD COLUMN Latitude double precision, ADD COLUMN Longitude double precision")
        cur.execute("UPDATE myLocation SET Latitude = (%s), Longitude = (%s)", (lat, long))
        cur.execute("ALTER TABLE myLocation ADD COLUMN geom geometry(POINT,4326)")
        cur.execute("UPDATE myLocation SET geom = ST_SetSRID(ST_MakePoint(Longitude,Latitude),4326)")
        cur.execute("CREATE INDEX idx_loc_geom ON myLocation USING GIST(geom)")
        con.commit()
        return redirect('/show')
    else:
        return template('view/Homepage.tpl')
    
@route('/show', method='GET')
def compare_List():
    # for dropdown
    cur.execute("SELECT DISTINCT Date from houston_events ORDER BY Date")
    Dates = cur.fetchall()
    row_list =[]
    for i in Dates:
        license_dict = {"Date": str(i[0])}
        row_list.append(license_dict)
    
    # for count
    cur.execute("SELECT * from houston_events")
    results = cur.fetchall()
    total = len(results) ## for count
        
    cur.execute("Select * FROM myLocation")
    currentLocation = cur.fetchall()
    d =[]
    for i in currentLocation:
        Json_dict = {"Latitude": i[2], "Longitude": i[3]}
        d.append(Json_dict)
    j = json.dumps(d)
    
    # for 0.01 xy location
    Date = request.GET.get('show', '').strip()
    cur.execute("Select * from houston_events b join mylocation t on ST_DWithin(t.geom, b.geom, 0.015) WHERE Date LIKE '%s' ORDER BY Time" % str(Date))
    individualDate = cur.fetchall()
    dateGroupTotal = len(individualDate)
    selectedDate = Date
    w =[]
    for item in individualDate:
        Json_dicts = {"Title": item[1], "Ticket": item[2], "Location": item[5], "Latitude": item[7], "Longitude": item[8]}
        w.append(Json_dicts)
    z = json.dumps(w)

    # for table
    Date = request.GET.get('show', '').strip()
    cur.execute("Select * from houston_events b join mylocation t on ST_DWithin(t.geom, b.geom, 0.015) WHERE Date LIKE '%s' ORDER BY Time Limit 5" % str(Date))
    indDate = cur.fetchall()
    e =[]
    for item in indDate :
        Json_dict_table = {"Title": item[1], "Ticket": item[2], "Location": item[5], "Latitude": item[7], "Longitude": item[8]}
        e.append(Json_dict_table)
        
    
    output = template('view/StoreList', rows = row_list, cnt=total, eventLoc=z, dateTotal=dateGroupTotal, currentLoc=j, PickedDate=selectedDate, tableList=e )
    return output

@route('/show/<name>', method='GET')
def compare_List(name):
    Date = request.GET.get('show', '').strip()
    cur.execute("SELECT * from houston_events WHERE location LIKE '%%%s%%'" % name)
    results = cur.fetchall()
    
    q =[]
    for it in results:
        dictss = {"Latitude": it[7], "Longitude": it[8]}
        q.append(dictss)
    h = json.dumps(q)
                
        
    return template('view/IndiList', rows=h)

@route('/reset', method='GET')
def delete_item():
    if request.GET.get('reset','').strip():
        cur.execute("DROP TABLE myLocation")
        con.commit()
        return redirect('/home')
    else:
        return template('view/StoreList.tpl')      
        
run(host='localhost',port=5000,debug=True)
